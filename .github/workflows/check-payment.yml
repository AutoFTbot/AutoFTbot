name: Check Payment Status

on:
  schedule:
    - cron: '*/5 * * * *'  # Tiap 5 menit
  workflow_dispatch:        # Bisa manual

jobs:
  check-payment:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo utama
        uses: actions/checkout@v2

      - name: Checkout OrderKuota-go (library lokal)
        uses: actions/checkout@v2
        with:
          repository: AutoFTbot/OrderKuota-go
          path: OrderKuota-go
          ref: v1.0.1

      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.21.13'

      - name: Init dan replace module lokal
        run: |
          go mod init github.com/AutoFTbot/AutoFTbot || true
          echo 'replace github.com/AutoFTbot/OrderKuota-go => ./OrderKuota-go' >> go.mod
          go mod tidy

      - name: Setup Git user
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Cek status pembayaran & update
        id: check_payment
        env:
          MERCHANT_ID: ${{ secrets.MERCHANT_ID }}
          API_KEY: ${{ secrets.API_KEY }}
          BASE_QR_STRING: ${{ secrets.BASE_QR_STRING }}
        run: |
          cd OrderKuota-go

          if [ ! -f ../donations.json ]; then
            echo "[ERROR] donations.json tidak ditemukan"
            echo "paid=false" >> "$GITHUB_OUTPUT"
            exit 1
          fi

          PENDING_COUNT=$(jq '[.[] | select(.status == "PENDING")] | length' ../donations.json)
          if [ "$PENDING_COUNT" = "0" ]; then
            echo "[INFO] Tidak ada donasi yang pending"
            echo "paid=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          AMOUNT=$(jq -r '[.[] | select(.status == "PENDING")][0].amount' ../donations.json)
          REFERENCE=$(jq -r '[.[] | select(.status == "PENDING")][0].reference' ../donations.json)

          echo "[INFO] Mengecek pembayaran untuk reference: $REFERENCE, amount: $AMOUNT"
          PAID=$(go run ../donation/check-payment.go "$REFERENCE" "$AMOUNT")

          if [ "$PAID" != "true" ] && [ "$PAID" != "false" ]; then
            echo "[ERROR] Nilai PAID tidak valid: $PAID"
            echo "paid=false" >> "$GITHUB_OUTPUT"
            exit 1
          fi

          echo "paid=$PAID" >> "$GITHUB_OUTPUT"

          if [ "$PAID" = "true" ]; then
            echo "[INFO] Pembayaran berhasil!"
            go run ../donation/update-status.go "$REFERENCE" "PAID"
            echo "[INFO] Generate QRIS baru..."
            go run ../donation/generate-qris.go

            cd ..
            git pull --rebase origin main
            git add donations.json qris.png
            git commit -m "Update payment status and generate new QRIS" || true
            git push
          else
            echo "[INFO] Pembayaran belum diterima"
          fi

      - name: Bikin GitHub Issue kalau berhasil
        if: steps.check_payment.outputs.paid == 'true'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          AMOUNT=$(jq -r '[.[] | select(.status == "PAID")] | sort_by(.date) | last.amount' donations.json)
          REFERENCE=$(jq -r '[.[] | select(.status == "PAID")] | sort_by(.date) | last.reference' donations.json)
          DATE=$(jq -r '[.[] | select(.status == "PAID")] | sort_by(.date) | last.date' donations.json)

          gh issue create \
            --title "✅ Payment Received: Rp $AMOUNT" \
            --body "🎉 **Terima kasih atas donasinya!**\n\n**💰 Jumlah:** Rp $AMOUNT\n**📄 Referensi:** \`$REFERENCE\`\n**📅 Tanggal:** $DATE\n\nQRIS baru telah digenerate. 🙏"
